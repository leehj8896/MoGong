//
//  MainViewController.swift
//  MoGong
//
//  Created by HL on 2022/06/19.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol MainDisplayLogic: class
{
  func displaySomething(viewModel: Main.Something.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic
{
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
  
  let headerView = UIView()
  let bodyView = UIScrollView()
  let contentView = UIView()
  let footerView = UIView()
  let logoView = UIView()
  let settingView = UIView()
  let searchView = UIView()
  let scrollView: UICollectionView = {
    let flowLayout = UICollectionViewFlowLayout()
    flowLayout.scrollDirection = .horizontal
    let collectionView = UICollectionView(frame: .zero, collectionViewLayout: flowLayout)
    return collectionView
  }()
  let spaceView = UIStackView()
  let clubView = UIStackView()
  let talkView = UIStackView()
  
  final let scrollViewCellID = "ScrollViewCell"
  final let tableViewCellID = "TableViewCell"

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    self.setupHeaderView()
    self.setupFooterView()
    self.setupBodyView()
    self.setupScrollView()
    self.setupSpaceView()
    self.setupClubView()
    self.setupTalkView()
    
    doSomething()
  }
  
  private func setupHeaderView() {
    self.headerView.backgroundColor = .red
    self.view.addSubview(headerView)
    headerView.snp.makeConstraints { make in
      make.top.left.right.equalTo(self.view.safeAreaLayoutGuide)
      make.height.equalTo(100)
    }
    
    // 로고
    self.logoView.backgroundColor = .blue
    self.headerView.addSubview(logoView)
    self.logoView.snp.makeConstraints { make in
      make.width.height.equalTo(50)
      make.centerY.equalToSuperview()
      make.left.equalToSuperview().offset(20)
    }
    
    // 설정
    self.settingView.backgroundColor = .blue
    self.headerView.addSubview(self.settingView)
    self.settingView.snp.makeConstraints { make in
      make.width.height.equalTo(50)
      make.centerY.equalToSuperview()
      make.right.equalToSuperview().offset(-20)
    }
    
    // 검색
    self.searchView.backgroundColor = .blue
    self.headerView.addSubview(self.searchView)
    self.searchView.snp.makeConstraints { make in
      make.width.height.equalTo(50)
      make.centerY.equalToSuperview()
      make.right.equalTo(self.settingView.snp.left).offset(-20)
    }
  }
  
  private func setupFooterView() {
    self.footerView.backgroundColor = .magenta
    self.view.addSubview(self.footerView)
    self.footerView.snp.makeConstraints { make in
      make.bottom.left.right.equalTo(self.view.safeAreaLayoutGuide)
      make.height.equalTo(100)
    }
  }
  
  private func setupBodyView() {
    self.bodyView.backgroundColor = .purple
    self.bodyView.contentSize = CGSize(width: self.view.frame.width, height: 2000)
    self.view.addSubview(self.bodyView)
    self.bodyView.snp.makeConstraints { make in
      make.top.equalTo(self.headerView.snp.bottom)
      make.left.right.equalTo(self.view.safeAreaLayoutGuide)
      make.bottom.equalTo(self.footerView.snp.top)
    }
    
    contentView.backgroundColor = .darkGray
    self.bodyView.addSubview(contentView)
    contentView.snp.makeConstraints { make in
      make.width.centerX.equalToSuperview()
      make.top.bottom.equalToSuperview()
    }
  }
  
  private func setupScrollView() {
    self.scrollView.delegate = self
    self.scrollView.dataSource = self
    self.scrollView.backgroundColor = .green
    self.scrollView.register(ScrollViewCell.self, forCellWithReuseIdentifier: scrollViewCellID)
    self.contentView.addSubview(self.scrollView)
    self.scrollView.snp.makeConstraints { make in
      make.top.equalToSuperview()
      make.left.right.equalToSuperview()
      make.height.equalTo(150)
    }
  }
  
  private func setupSpaceView() {
    self.spaceView.backgroundColor = .brown
    self.spaceView.distribution = .equalSpacing
    self.spaceView.axis = .vertical
    self.spaceView.isLayoutMarginsRelativeArrangement = true
    self.spaceView.layoutMargins = UIEdgeInsets(top: 20, left: 0, bottom: 20, right: 0)
    
    self.contentView.addSubview(self.spaceView)
    self.spaceView.snp.makeConstraints { make in
      make.top.equalTo(self.scrollView.snp.bottom).offset(10)
      make.width.equalToSuperview()
      make.height.equalTo(150)
    }
    
    for i in 1...5 {
      let row = UIView()
      let category = UILabel()
      category.text = "종류\(i)"
      row.addSubview(category)
      category.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalToSuperview().offset(20)
        make.width.equalTo(50)
      }
      let title = UILabel()
      title.text = "글제목\(i) 글제목\(i) 글제목\(i) 글제목\(i)"
      row.addSubview(title)
      title.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalTo(category.snp.right).offset(20)
      }
      spaceView.addArrangedSubview(row)
    }
  }
  
  private func setupClubView() {
    self.clubView.backgroundColor = .cyan
    self.clubView.distribution = .equalSpacing
    self.clubView.axis = .vertical
    self.clubView.isLayoutMarginsRelativeArrangement = true
    self.clubView.layoutMargins = UIEdgeInsets(top: 20, left: 0, bottom: 20, right: 0)
    
    self.contentView.addSubview(self.clubView)
    self.clubView.snp.makeConstraints { make in
      make.top.equalTo(self.spaceView.snp.bottom).offset(10)
      make.width.equalToSuperview()
      make.height.equalTo(150)
    }
    
    for i in 1...5 {
      let row = UIView()
      let category = UILabel()
      category.text = "종류\(i)"
      row.addSubview(category)
      category.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalToSuperview().offset(20)
        make.width.equalTo(50)
      }
      let title = UILabel()
      title.text = "글제목\(i) 글제목\(i) 글제목\(i) 글제목\(i)"
      row.addSubview(title)
      title.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalTo(category.snp.right).offset(20)
      }
      clubView.addArrangedSubview(row)
    }
  }

  private func setupTalkView() {
    self.talkView.backgroundColor = .orange
    self.talkView.distribution = .equalSpacing
    self.talkView.axis = .vertical
    self.talkView.isLayoutMarginsRelativeArrangement = true
    self.talkView.layoutMargins = UIEdgeInsets(top: 20, left: 0, bottom: 20, right: 0)

    self.contentView.addSubview(self.talkView)
    self.talkView.snp.makeConstraints { make in
      make.top.equalTo(self.clubView.snp.bottom).offset(10)
      make.width.equalToSuperview()
      make.height.equalTo(150)
      make.bottom.equalToSuperview()
    }
    
    for i in 1...5 {
      let row = UIView()
      let category = UILabel()
      category.text = "종류\(i)"
      row.addSubview(category)
      category.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalToSuperview().offset(20)
        make.width.equalTo(50)
      }
      let title = UILabel()
      title.text = "글제목\(i) 글제목\(i) 글제목\(i) 글제목\(i)"
      row.addSubview(title)
      title.snp.makeConstraints { make in
        make.centerY.equalToSuperview()
        make.left.equalTo(category.snp.right).offset(20)
      }
      talkView.addArrangedSubview(row)
    }
  }

  // MARK: Do something
  
  func doSomething()
  {
    let request = Main.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Main.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}

extension MainViewController: UIScrollViewDelegate {
//  scrollview
}

extension MainViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return 5
  }
  
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = self.scrollView.dequeueReusableCell(withReuseIdentifier: scrollViewCellID, for: indexPath)
    cell.backgroundColor = .gray
    return cell
  }
  
  func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
    return CGSize(width: 120, height: 120)
  }
}
